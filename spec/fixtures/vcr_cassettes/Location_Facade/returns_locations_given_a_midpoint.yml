---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=google_api_key&location=39.7512038,-104.9447319&rankby=distance&type=cafe
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.3.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Thu, 09 Jun 2022 01:15:21 GMT
      Expires:
      - Thu, 09 Jun 2022 01:20:21 GMT
      Cache-Control:
      - public, max-age=300
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      Content-Length:
      - '6665'
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=138
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogW10sCiAgICJuZXh0X3BhZ2VfdG9rZW4iIDogIkFhcF91RUNvVEhucHVVTG1VV010TE9SYlF2VFNrWXhZcTRGemV2b1VaUGZtNDlMS2R4S190V2hCeEZWM21ZN0tGRGczRUNhNFNJSkk1QzdjZ3BwenJhcV9ENTRUb1JvSnpyUmhqLWd6Rk9uekJ0ZkY4eDkzZEwwb1lkdGJpNkVLRXVNb2xQUTZ5YXp2RzBPU2hHZ3JabFplSWRvcmpYNm9MLVFLRkg3eERaZU0tMkJsUlJ2STBZNWR2OG1sM1NSRWY3VkJrN0Jpd092Qm1rU19LT0EtZFl5NGJWdDAtbkpCRm1fOHhRMEh3cGRmNTlJMmlvZEVoVVg1WjAtWWwyTGVCQ2tzV3ZUVjBMNjlMMmNBSDh0eTNIbmxWOW5JRENENUFwRVZ3cnE4b3h1S3ktYTExZmF5R0xTZHlZSmowUmYxdTVBOVREdGJWUk1FV1htRzNkM1NrQTV4UkNGSldhVzY3RFZHSGFGSy0zMGpldm84dmhiQ1NsX2Q5M1F1dlhfOUxIT2Q3UkhEcktaMXRNazVGcmtTRnRmWUZXZnNvZzVaRUhxckFZaWJqQmVWVlo3U29aN0dXUWxCZF9rIiwKICAgInJlc3VsdHMiIDogWwogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDgwODYwOTk5OTk5OSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0MjI4MzIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzQ5NTM5MDMwMjkxNDksCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDEzMTQ2MTk3MDg1CiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0Njg0MTA2OTcwODQ5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTQ0MDEyNTgwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL2NhZmUtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvY2FmZV9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiVC1SZXggQ2FmZSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzAyNCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDY3NjE2ODUwNjQ1NDg0MDYxOTdcIlx1MDAzZVNhbmRlZXAgSmFra2FyYWp1XHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUFDelE3VFpyb2pfUnJGeDlxX0QzY3phbEtnNVhpRmFWZm5uSGdKUThhUTA3d01zb1lEU0pWY0Q3X1VKZmhFOXZpWEtzcEtLd2FRbU1KMTVVcDh6Um9hVFRUUmpUM3UzQ2U3dGkybXc2eUVlNFk3UTRwcUlyUnBZd1NnYmhYUzNZdExiN2xJWWJWaTVIdXlsNDVrQ1llRHQtZGRibnIwWHluOW1jbXZqbFN1Z0hZbSIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0MDMyCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKZnkxMFNWUjViSWNSSVdUWDB4UGUycFUiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlAzWDUrNjMgRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUDNYNSs2MyIKICAgICAgICAgfSwKICAgICAgICAgInJhdGluZyIgOiAzLjUsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpmeTEwU1ZSNWJJY1JJV1RYMHhQZTJwVSIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsgImNhZmUiLCAiZm9vZCIsICJwb2ludF9vZl9pbnRlcmVzdCIsICJlc3RhYmxpc2htZW50IiBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDM2LAogICAgICAgICAidmljaW5pdHkiIDogIjIwMDEgQ29sb3JhZG8gQm91bGV2YXJkLCBEZW52ZXIiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc1MDg5NDgsCiAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45MzMxMTMyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc1MjMzNjIzMDI5MTQ5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTMxNzE4NjY5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDk2MzgyNjk3MDg0OSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0LjkzNDQxNjYzMDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9jYWZlLTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL2NhZmVfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIkhvbmV5IEhpbGwgQ2FmZSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogNjAxNiwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDc2ODQ4NzMzMTY0OTc2NDM1MDRcIlx1MDAzZUhvbmV5IEhpbGwgQ2FmZVx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVDc1VzZW80Yk9JTEp6clQzNHZLOEViRWItczJYWUJkMUNtYmY0NDBFRjJaYjRSNV9TM0ItdU5VUHA4czNuY3NOY3ZXS2VHU0pWOE9uQ3lRM1p1ZkduV0FkTnduZFJobDU5TEdBQ3Y4Z3QxYXotRTVNUnZOMjBEbEQ3RE50S29RRmhsRFBENWtIbE96RjhUVDRfTmd5ZERUdlZFLTBUb1RvSXRRM29PeG81a1JjSFgiLAogICAgICAgICAgICAgICAid2lkdGgiIDogNDAxNgogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSkhYSFE0eVo3YkljUmFLM3VjM2JHT1RVIiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICJRMzI4KzlRIERlbnZlciwgQ08sIFVTQSIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVGUVEzMjgrOVEiCiAgICAgICAgIH0sCiAgICAgICAgICJyYXRpbmciIDogNC42LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKSFhIUTR5WjdiSWNSYUszdWMzYkdPVFUiLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJjYWZlIiwgImZvb2QiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAyMTIsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiNDYyOCBFYXN0IDIzcmQgQXZlbnVlLCBEZW52ZXIiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0MDQ3ODQ5OTk5OTk5LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTQ0Njg3OQogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDE5MjMwMzAyOTE1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTQzMTkwMjY5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43MzkyMjUwNjk3MDg1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTQ1ODg4MjMwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL2NhZmUtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvY2FmZV9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiU3Byb3V0cyBNYXJrZXQgQ29ybmVyIENvZmZlZSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSmZZaktkNngtYkljUklGQVMxRFlUdDVjIiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICJQM1I0KzU0IERlbnZlciwgQ08sIFVTQSIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVGUVAzUjQrNTQiCiAgICAgICAgIH0sCiAgICAgICAgICJyYXRpbmciIDogNC4xLAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKZllqS2Q2eC1iSWNSSUZBUzFEWVR0NWMiLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJjYWZlIiwgImZvb2QiLCAic3RvcmUiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAzOCwKICAgICAgICAgInZpY2luaXR5IiA6ICIzNjI1IEVhc3QgQ29sZmF4IEF2ZW51ZSwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDAwMDIsCiAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDYzNTE1CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0MTQyNjkzMDI5MTUsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDUwMDE0Njk3MDg1CiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5LjczODcyODk2OTcwODUsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDc2OTk0MzAyOTE1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvY2FmZS03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9jYWZlX3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJMdWxhIFJvc2UgR2VuZXJhbCBTdG9yZSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMTM2NSwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMTY3MTIyMDY1NDkyMzU1MzcwNjJcIlx1MDAzZUx1bGEgUm9zZSBHZW5lcmFsIFN0b3JlXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUNvanhtRC13VF8wcnRSWHh3Rk5SYTNrcWtsclp6VjdDQk1JeGFwMG5nbjZydFlMXzVwbkpGSEtZd2VkOFJuT2RJUGdVM1gxVXl2YWRsYmJzd1p2QXJRdjRua3RrYkVvX0I2QkdIdDdaX3NGUWY3NDY2aVdRM0std0VfVmI1dDZsUjVkNWt5Y1FvTXcyVGNoV0hxc1VpZDdDYXlIOFdnb2EzMjRiOWJFZ0RSUnBELSIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiAyMDQ4CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKODFCV1FLeC1iSWNSQ0RIcVNqN3g0ZU0iLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlAzUjMrMkYgRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUDNSMysyRiIKICAgICAgICAgfSwKICAgICAgICAgInByaWNlX2xldmVsIiA6IDEsCiAgICAgICAgICJyYXRpbmciIDogNC42LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKODFCV1FLeC1iSWNSQ0RIcVNqN3g0ZU0iLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJjYWZlIiwgImZvb2QiLCAic3RvcmUiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAyNTgsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMzQzNCBFYXN0IENvbGZheCBBdmVudWUsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM5ODgyNiwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0NTUyNgogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDEzNjQ2MzAyOTE0OSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0NDEyMzAxOTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM4NjY2NjY5NzA4NSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0NjgyMDk4MDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9yZXN0YXVyYW50LTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL3Jlc3RhdXJhbnRfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIkZveCBSdW4gQ2FmZSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMTY2NywKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDA1Mjg2MTA2NTM5NDk4MjIyNzlcIlx1MDAzZUZveCBSdW4gQ2FmZVx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVBV293SVlEal9IQmR0cDFMVm5jd3FFRVE1bkpQVm9laEdjcnlfYmRoUVcySUV5bTF1UjhvQWMzX0Fnd1FjQWxld04wTlRKVU9oX3ROLVJzeWRyVXJVaVFpTXVybm9oMG01OV83WkdwRmY2RVdYX1o1T2ZWMFFvZ1h5SmJIVUtUdm9nUXJfR3llbm1sMHJOQ3hCNmFpRk1CTFZON3VGMHdhOHJNb1VkSjVwME50NVgiLAogICAgICAgICAgICAgICAid2lkdGgiIDogMjUwMAogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSkdld0R6NWhfYkljUnpOUmhvLUxZQ3d3IiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICJQM1EzK1hRIERlbnZlciwgQ08sIFVTQSIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVGUVAzUTMrWFEiCiAgICAgICAgIH0sCiAgICAgICAgICJyYXRpbmciIDogNC44LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKR2V3RHo1aF9iSWNSek5SaG8tTFlDd3ciLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbCiAgICAgICAgICAgICJyZXN0YXVyYW50IiwKICAgICAgICAgICAgImJha2VyeSIsCiAgICAgICAgICAgICJjYWZlIiwKICAgICAgICAgICAgImZvb2QiLAogICAgICAgICAgICAic3RvcmUiLAogICAgICAgICAgICAicG9pbnRfb2ZfaW50ZXJlc3QiLAogICAgICAgICAgICAiZXN0YWJsaXNobWVudCIKICAgICAgICAgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAyMzMsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMzU1MCBFYXN0IENvbGZheCBBdmVudWUsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzQwMzQwMjk5OTk5OTksCiAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDk2NTY0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0MTYwMzE4MDI5MTUsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDgzMDcxMTk3MDg1CiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5LjczODkwNTIxOTcwODUsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NTEwMDUwODAyOTE1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvY2FmZS03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9jYWZlX3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJIb29rZWQgb24gQ29sZmF4IiwKICAgICAgICAgIm9wZW5pbmdfaG91cnMiIDogewogICAgICAgICAgICAib3Blbl9ub3ciIDogZmFsc2UKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiA0MDMyLAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzEwNzM3MzYwMzkyMjMzMjAyNTE1NlwiXHUwMDNlTGlseSBDaGFuZ1x1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVCZXlYSVhLbVBnb1RzTW1EZFFrUWtIWTl3UGg5SF9abXJfQnpRS2xMazQ1NnpGVXg0ZjFadi1XeF9qZXBjOE1BaUU4MnRLaktKOERnWmFpNG9JZXQ3M3c3LUF0LTFpNFdRY0pjVnFmYzlwSmZCNUFiUENLZ0dFUUg4Y1EyME5qaXBMdC13QWZ2dGZucjZGU0xPTjVOLVJJb3BqRmRVQW5BdGFub3pYeHhYVWtBUSIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiAzMDI0CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKejlaMW5LMS1iSWNSdmhfNG02LWRieWciLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlAzUjIrNDQgRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUDNSMis0NCIKICAgICAgICAgfSwKICAgICAgICAgInByaWNlX2xldmVsIiA6IDEsCiAgICAgICAgICJyYXRpbmciIDogNC42LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKejlaMW5LMS1iSWNSdmhfNG02LWRieWciLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJjYWZlIiwgImZvb2QiLCAic3RvcmUiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiA2MDYsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMzIxMyBFYXN0IENvbGZheCBBdmVudWUsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM5Mzk1Mjk5OTk5OTksCiAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDIzMDg0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0MDY4MDQzMDI5MTQ5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTQxMDM0ODY5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43Mzc5ODI0Njk3MDg0OSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0MzczMjgzMDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9jYWZlLTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL2NhZmVfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogImluayEgQ29mZmVlIE5KSCIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogNTM2LAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzExNzQwMDAzMDk0NjQ0OTkxMDU4MFwiXHUwMDNlaW5rISBDb2ZmZWUgTkpIXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUNlWTYyeXNsUjVWUU5LZWpZLVZrd3RsS19kczZtRlhET0JpbWp6YS15RHc5LV9YUmUxUFNJeWhsNTd3VVpkdnRWRWduTXR5ZzNLYUhObTIzRGFMQ3V5dlVmUndJM1BBMDJGNzVJcDBEOTZJZC1BM0dLUS1xRnNyWFNnVHpRRV8xZ05ORHdNWFg1cHRBOXdMWWxXcUpUemJFdnJERjN0N3Y0YkpZMEoyaDFzYTlHMyIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA4NjIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpmVW9sMGF0LWJJY1JReU9pZm11by1CUSIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDNRNStRMyBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQM1E1K1EzIgogICAgICAgICB9LAogICAgICAgICAicmF0aW5nIiA6IDIuMiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSmZVb2wwYXQtYkljUlF5T2lmbXVvLUJRIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAiY2FmZSIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogNDEsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMTQwMCBKYWNrc29uIFN0cmVldCwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDgzNDgzLAogICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTYwMzQ5MQogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDk2ODMwODAyOTE1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTU5MDEwNjY5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDY5ODUxMTk3MDg1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTYxNzA4NjMwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiQ2Fmw6kgTWlyaWFtIGF0IENpdHkgUGFyayAtIEJydW5jaCwgTHVuY2gsIERpbm5lciIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogNDk5LAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzExNjUyNjI4OTUxODA2MTcxNTkwOFwiXHUwMDNlQ2Fmw6kgTWlyaWFtIGF0IENpdHkgUGFyayAtIEJydW5jaCwgTHVuY2gsIERpbm5lclx1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVCNVBpUnlGY2M0ZWRKQkZVb25FRXpNQjZQaS0yUHVfeDRWX1dMTmFSTXdGWDlsNFdxZks5VktJV0JSYnhIZkE2RFhTZnlEcUtVOVhLY3RDME81V24zVHB4djRYWEI2WkhJZjRydV9ZR25kWTdqM1l3TDFTRmNweEZ5elB6SDdrZTJub0NKeVI1UmNFQUhxOG5MR1RRQ2NKUWZ0eDhBZmViS0FISUg4dDNKbUJLNmkiLAogICAgICAgICAgICAgICAid2lkdGgiIDogNzU1CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKU1pUenUwbDViSWNSU1Z1S0JGdS1TVVEiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlAyWFErOFYgRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUDJYUSs4ViIKICAgICAgICAgfSwKICAgICAgICAgInJhdGluZyIgOiA0LjgsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpTWlR6dTBsNWJJY1JTVnVLQkZ1LVNVUSIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgInJlc3RhdXJhbnQiLAogICAgICAgICAgICAiY2FmZSIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInN0b3JlIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogNTM1LAogICAgICAgICAidmljaW5pdHkiIDogIjIyMTcgRWFzdCAyMXN0IEF2ZW51ZSwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDA0MTk5OTk5OTk5OSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk1Mjc4CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0MTcyNzMzMDI5MTUsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NTE0MzAzMTk3MDg1CiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5LjczOTAyOTM2OTcwODUsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NTQxMjgyODAyOTE1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvY2FmZS03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9jYWZlX3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJTdGFyYnVja3MiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDMwMjQsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTA5MTI5NDYwMDkyNzM5NTE3MTE4XCJcdTAwM2VKb25hdGhhbiBIZXJuYW5kZXpcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFQkVpQlZlZ0UxeGtyOVp6NWRkcnJpckZLbkJLd1VVSU9zdnZOTjY0c2hTVkpQY3VrbW16MUd5OE1SWTg5WklXdGRwaUFuVURsTjNsYVJQZFBZTEdkVHNxS2VZYlJYZUNnMFdxcV85SkdNMW5ncWFtbGhhcUx4MnZsNGRkd1plUHR1ZlUtRmw0M1RIRURQSjFhbHRwMFEyako4a2lIcWgtakhTSDdnMHA4YmQxYVhkIiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDQwMzIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpMeS1vOExKLWJJY1IyY0RHaWxQUG1RTSIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDJSVys1ViBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQMlJXKzVWIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMiwKICAgICAgICAgInJhdGluZyIgOiA0LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKTHktbzhMSi1iSWNSMmNER2lsUFBtUU0iLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbICJjYWZlIiwgImZvb2QiLCAic3RvcmUiLCAicG9pbnRfb2ZfaW50ZXJlc3QiLCAiZXN0YWJsaXNobWVudCIgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiA3NjMsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMjk3NSBFYXN0IENvbGZheCBBdmVudWUsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzYzNjU1NCwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0MDExNTQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzY1MDQ3NDMwMjkxNSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0LjkzODgzNDM2OTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzYyMzQ5NDY5NzA4NSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0MTUzMjMzMDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9yZXN0YXVyYW50LTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL3Jlc3RhdXJhbnRfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIk1jRG9uYWxkJ3MiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiB0cnVlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzQ1NiwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDkxNzkyODE5OTM3MDY2NTcxMjBcIlx1MDAzZUxhcnJ5IER1a2VzXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUEySHpiQjI1VkF4cmNNd1ZURXJaVTFGUzBvUURDQWZZb1hwc1V5TVY0Z0RCeUdDdlRJSGJMc0c1OFd3bnJpUjFFcjhiTXMtLWVMLXQyTGZnSTNQeHg1NDd1QnU2azVQSFZyb1E5dHpXdktfYlhLVUtQRTlhM3lSLWIyOHRlZHZVcWNrUW1ta1BuRW9xYTZiQ1hqT2s1MnBsdnhiT0hnTjdPOFJ4OFRiakV5SFBDVCIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0NjA4CiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKcDdVdncxOTViSWNSLTNNQi1Cb2x0SDQiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlEzNzUrRlggRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUTM3NStGWCIKICAgICAgICAgfSwKICAgICAgICAgInByaWNlX2xldmVsIiA6IDEsCiAgICAgICAgICJyYXRpbmciIDogMy40LAogICAgICAgICAicmVmZXJlbmNlIiA6ICJDaElKcDdVdncxOTViSWNSLTNNQi1Cb2x0SDQiLAogICAgICAgICAic2NvcGUiIDogIkdPT0dMRSIsCiAgICAgICAgICJ0eXBlcyIgOiBbCiAgICAgICAgICAgICJjYWZlIiwKICAgICAgICAgICAgInJlc3RhdXJhbnQiLAogICAgICAgICAgICAiZm9vZCIsCiAgICAgICAgICAgICJzdG9yZSIsCiAgICAgICAgICAgICJwb2ludF9vZl9pbnRlcmVzdCIsCiAgICAgICAgICAgICJlc3RhYmxpc2htZW50IgogICAgICAgICBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDIxNTEsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMzM1MCBDb2xvcmFkbyBCb3VsZXZhcmQsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzQwMzUxOCwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk1NDExMzQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzQxNjY0NDgwMjkxNSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk1MjczODMxOTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM4OTY2NTE5NzA4NTEsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NTU0MzYyODAyOTE1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvY2FmZS03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9jYWZlX3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJMaWtlIFRlYSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IHRydWUKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiAxMDgwLAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzEwNDIxOTA5NTM3ODQ0Mzk3NDc2MVwiXHUwMDNlTGlrZSBUZWFcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFRHhkcGp5ZVcxa2lwQk5iNXBWc1Y1aU5kcFdVanBKc0ZMWFRNSW05Ym5hWTVnSF9laWFrNFhMNUhnY2pmSGV4eWZaVldPMHduWlByUWUwZUFDVFNuNzFvWjZaQ3lycHNxRlRLVWhWa3JSWm9mbGpMT25zcTNsc21NTTFFakVyRHVDVnQwUG9FclY2UDNaN0c5LWdaTlhDbVFtQk8yeWZPSW9JRGEyNlZoNEVqX1pzIiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDE0MzgKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUp1VnZrRDJ0X2JJY1IwSFBRWFMxS2pSWSIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDJSVys0OSBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQMlJXKzQ5IgogICAgICAgICB9LAogICAgICAgICAicmF0aW5nIiA6IDQuNSwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSnVWdmtEMnRfYkljUjBIUFFYUzFLalJZIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAiY2FmZSIsICJmb29kIiwgInBvaW50X29mX2ludGVyZXN0IiwgImVzdGFibGlzaG1lbnQiIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMTEsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMjgyMyBFYXN0IENvbGZheCBBdmVudWUsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzU4MDMxOCwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk2MDAzNjQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzU5MzU5MzgwMjkxNSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk1ODU0Mzg2OTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzU2NjYxNDE5NzA4NSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk2MTI0MTgzMDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9yZXN0YXVyYW50LTcxLnBuZyIsCiAgICAgICAgICJpY29uX2JhY2tncm91bmRfY29sb3IiIDogIiNGRjlFNjciLAogICAgICAgICAiaWNvbl9tYXNrX2Jhc2VfdXJpIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YyL3Jlc3RhdXJhbnRfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIlBGIERvbnV0IFNob3AiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDU5OSwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDgxNDI2MTcyODYzNzU0NDI4ODNcIlx1MDAzZVBGIERvbnV0IFNob3BcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFQ2xPQmo5aGdJcmVsMHBWLVFSaHBhTlRGazFGZGxCUUZQXzlYYVhsUmE0b3ZESXpaQS1BSDkxcnVhQ1NCQmdzbjFzdE9EN3FPM3Rlc09mTTVja2kwOEdEUFJJeVMxbnN2eVJBLWNhWVh5d0VfTlpyRE9Obk5nUDNYU3R4TjBoSU94emZiRWV3cVVUeS1XbjhtODhpODZuaHJaSFI0c3Y2YUJUcjF2b1plbGU3em8iLAogICAgICAgICAgICAgICAid2lkdGgiIDogNDgzCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKUlc5UjUwQjViSWNSTWttdi1NTkhXOFEiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlEyNVErNlggRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUTI1USs2WCIKICAgICAgICAgfSwKICAgICAgICAgInJhdGluZyIgOiA0LjIsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpSVzlSNTBCNWJJY1JNa212LU1OSFc4USIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgImJha2VyeSIsCiAgICAgICAgICAgICJjYWZlIiwKICAgICAgICAgICAgImZvb2QiLAogICAgICAgICAgICAic3RvcmUiLAogICAgICAgICAgICAicG9pbnRfb2ZfaW50ZXJlc3QiLAogICAgICAgICAgICAiZXN0YWJsaXNobWVudCIKICAgICAgICAgXSwKICAgICAgICAgInVzZXJfcmF0aW5nc190b3RhbCIgOiAxMDQsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMjg1NSBZb3JrIFN0cmVldCwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDAwMDM0LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTU2NjU2NgogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDEwNDkyMzAyOTE1MSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk1NTI4OTQ2OTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM4MzUxMjY5NzA4NTEsCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NTc5ODc0MzAyOTE1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvc2hvcHBpbmctNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiIzRCOTZGMyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvc2hvcHBpbmdfcGlubGV0IiwKICAgICAgICAgIm5hbWUiIDogIlRhdHRlcmVkIENvdmVyIEJvb2sgU3RvcmUgJiBDYWbDqSBDb2xmYXgiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiB0cnVlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzAyNCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDQ4NTk1MjAzMzUxNTAzODg3MjZcIlx1MDAzZUx1aXMgT3ZpZWRvXHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUREREpWajhpalpLa0dCdG5BLUo0XzMydHh4RlNmYS1TMTRCM0VVTC0wMThjWl9faG5ERUl4Q0ZHMVotTXNSYzlCdzhDeUZfLUduZUpJVDhkMjZXcGFfR0hKdVMwTFA1c2I2NU1iQTlyOUduNXU5Z281S1J4U1ZqSlF4WV9aRlVydTU0dks4bFhIaGdrNl91Y0t4TEpvVFI1LU9fbjUxYVo2OVEtRnJGTFlQczJZbyIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA0MDMyCiAgICAgICAgICAgIH0KICAgICAgICAgXSwKICAgICAgICAgInBsYWNlX2lkIiA6ICJDaElKZi1zLWg3Ui1iSWNSbU5Ga096RjMxS0kiLAogICAgICAgICAicGx1c19jb2RlIiA6IHsKICAgICAgICAgICAgImNvbXBvdW5kX2NvZGUiIDogIlAyUlYrMjggRGVudmVyLCBDTywgVVNBIiwKICAgICAgICAgICAgImdsb2JhbF9jb2RlIiA6ICI4NUZRUDJSVisyOCIKICAgICAgICAgfSwKICAgICAgICAgInJhdGluZyIgOiA0LjgsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpmLXMtaDdSLWJJY1JtTkZrT3pGMzFLSSIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgImJvb2tfc3RvcmUiLAogICAgICAgICAgICAiY2FmZSIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInN0b3JlIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMjU3MSwKICAgICAgICAgInZpY2luaXR5IiA6ICIyNTI2IEVhc3QgQ29sZmF4IEF2ZW51ZSwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NTgyMzE4LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTI4MTQ4OAogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NTk1ODEwODAyOTE0OSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0LjkyNjc1NTY2OTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzU2ODgzMTE5NzA4NDksCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45Mjk0NTM2MzAyOTE1CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICB9LAogICAgICAgICAiaWNvbiIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92MS9wbmdfNzEvY2FmZS03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjRkY5RTY3IiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9jYWZlX3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJUaGVyaXpvIENhZsOpIGFuZCBUYXAiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDI1OTIsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTAzOTQyOTg5NzUxNDM0NjYxNjAyXCJcdTAwM2VNYXRoaWFzIFN0ZWZmZW5cdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFRHFUVHdtVHdSWEl0bWwzbVQ2RTJMNU1fNnBSaTlHTzZPYlROY21Xb0dieThQT29Ia1NBLWd1WXZIeWRSUkM0eTRTcmxNVDI5M1hnV2s3cWhMSUJ0N3J2ZWtfb3A4a096NmNGUjd0a1pSc0hONnhUTGFGbHhwRjQzVXYyVjBYMTYxZ2Zzb0NQdVJOSXRjclpzODlCUEJZT2FKQzc2V09LT29MTmx5ckd4TlFsYWFRIiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDQ2MDgKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpGOXAtejlsN2JJY1ItV2k3OFFMSWlWUSIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUTM1Qys3UCBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFRMzVDKzdQIgogICAgICAgICB9LAogICAgICAgICAicmF0aW5nIiA6IDQuOSwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSkY5cC16OWw3YkljUi1XaTc4UUxJaVZRIiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWyAiY2FmZSIsICJiYXIiLCAiZm9vZCIsICJzdG9yZSIsICJwb2ludF9vZl9pbnRlcmVzdCIsICJlc3RhYmxpc2htZW50IiBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDg3LAogICAgICAgICAidmljaW5pdHkiIDogIjI4OTAgRmFpcmZheCBTdHJlZXQsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzY1MzI1NywKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0MDEwMjEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzY2NzU1MDgwMjkxNSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0LjkzODcyOTgxOTcwODUKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgInNvdXRod2VzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzY0MDU3MTE5NzA4NSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0MTQyNzc4MDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9zaG9wcGluZy03MS5wbmciLAogICAgICAgICAiaWNvbl9iYWNrZ3JvdW5kX2NvbG9yIiA6ICIjNEI5NkYzIiwKICAgICAgICAgImljb25fbWFza19iYXNlX3VyaSIgOiAiaHR0cHM6Ly9tYXBzLmdzdGF0aWMuY29tL21hcGZpbGVzL3BsYWNlX2FwaS9pY29ucy92Mi9jb252ZW5pZW5jZV9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiQ2lyY2xlIEsiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiB0cnVlCiAgICAgICAgIH0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSlVUaHZhMkI1YkljUnR2X0xFSFJmOFc4IiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICJRMzg1KzRYIERlbnZlciwgQ08sIFVTQSIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVGUVEzODUrNFgiCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDMuNCwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSlVUaHZhMkI1YkljUnR2X0xFSFJmOFc4IiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWwogICAgICAgICAgICAiY29udmVuaWVuY2Vfc3RvcmUiLAogICAgICAgICAgICAiZ2FzX3N0YXRpb24iLAogICAgICAgICAgICAiY2FmZSIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInN0b3JlIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMTMsCiAgICAgICAgICJ2aWNpbml0eSIgOiAiMzQ5MCBDb2xvcmFkbyBCb3VsZXZhcmQsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM5OTE2LAogICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTMxNzAwMQogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDEyNDgzMzAyOTE1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTMwNDI0NzE5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43Mzg1NTAzNjk3MDg1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTMzMTIyNjgwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL2NhZmUtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvY2FmZV9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiSG90IENoaWNrIEEgTGF0dGUgQ29mZmVlIEhvdXNlIiwKICAgICAgICAgIm9wZW5pbmdfaG91cnMiIDogewogICAgICAgICAgICAib3Blbl9ub3ciIDogZmFsc2UKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiAzMDI0LAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzExMDkwODQ1MDc4MDk2Mjc4MTA3OVwiXHUwMDNlTWlrZSBEYXJkZW5cdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFQjBHS2JVU25pOWxVbmdVdWM2SmRHVUV2Q0ZrSERxMnRER2k1LS1DclFKdW96ckt0bUk4dXNzN3J2YktFaGg1WXBVSDloQXdRaXVYY2RfbENKeDE5R202VV9tLXcwT0YyOXd4Zm5jRFFwRGlLN1EwZFJoQm9BLXZfNFZFTkpackFJUjNTM2FYcHRfampiN1h0YTZxNkc1bFJ5ZEtrRkhndWppZmhBVlF3emJZdDVzIiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDQwMzIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpXZl9KR1FSOGJJY1JGQnR0MzAxazMwZyIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDNROStYOCBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQM1E5K1g4IgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMSwKICAgICAgICAgInJhdGluZyIgOiA0LjUsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpXZl9KR1FSOGJJY1JGQnR0MzAxazMwZyIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgImNhZmUiLAogICAgICAgICAgICAicmVzdGF1cmFudCIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInN0b3JlIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMzk4LAogICAgICAgICAidmljaW5pdHkiIDogIjQ3MzYgRWFzdCBDb2xmYXggQXZlbnVlLCBEZW52ZXIiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAgImJ1c2luZXNzX3N0YXR1cyIgOiAiT1BFUkFUSU9OQUwiLAogICAgICAgICAiZ2VvbWV0cnkiIDogewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICAibGF0IiA6IDM5LjczOTk1MTEsCiAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NTg0MTgyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aWV3cG9ydCIgOiB7CiAgICAgICAgICAgICAgICJub3J0aGVhc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5Ljc0MTM5OTY4MDI5MTQ5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTU3MDI3NjE5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43Mzg3MDE3MTk3MDg0OSwKICAgICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk1OTcyNTU4MDI5MTUKICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgICJpY29uIiA6ICJodHRwczovL21hcHMuZ3N0YXRpYy5jb20vbWFwZmlsZXMvcGxhY2VfYXBpL2ljb25zL3YxL3BuZ183MS9iYXItNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvYmFyX3BpbmxldCIsCiAgICAgICAgICJuYW1lIiA6ICJCYXIgTWF4IiwKICAgICAgICAgIm9wZW5pbmdfaG91cnMiIDogewogICAgICAgICAgICAib3Blbl9ub3ciIDogZmFsc2UKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiA0MzEsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTEzMTAzNzY3MTA1MTUwMzMzMzY2XCJcdTAwM2VCYXIgTWF4XHUwMDNjL2FcdTAwM2UiCiAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICJwaG90b19yZWZlcmVuY2UiIDogIkFhcF91RUE4VDVVN2lvcm1qWHlTbkE3TjFEZC0xZXdreTRNRGxjbWpoWHRqWW5Ra2JEcDdteGFJOUxndzZBNDFkaWg4Z0pMWV92Wks1TTBGdXBkOHpkNlh6Rno4N2NWbFJGWmdXZmMyREdOLW5Zc1BtU19VSVJyaVNRRTJrcmtpUV92QkR4RHFYR3RDcWdqUnV4R3JxdXVsZHNEUUhBeWRNZHhJSm9IUC1tOEU0aDFHcHVvcyIsCiAgICAgICAgICAgICAgICJ3aWR0aCIgOiA2NDAKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpQLXZOOGJSLWJJY1I4SlFvVkVEejQ0WSIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDJRUitYSiBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQMlFSK1hKIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMiwKICAgICAgICAgInJhdGluZyIgOiA0LjYsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpQLXZOOGJSLWJJY1I4SlFvVkVEejQ0WSIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgImJhciIsCiAgICAgICAgICAgICJuaWdodF9jbHViIiwKICAgICAgICAgICAgImNhZmUiLAogICAgICAgICAgICAiZm9vZCIsCiAgICAgICAgICAgICJwb2ludF9vZl9pbnRlcmVzdCIsCiAgICAgICAgICAgICJlc3RhYmxpc2htZW50IgogICAgICAgICBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDE1OSwKICAgICAgICAgInZpY2luaXR5IiA6ICIyNDEyIEVhc3QgQ29sZmF4IEF2ZW51ZSwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43MzUyNjA2OTk5OTk5OSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0Ljk0NTg3NDUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM2NTk1NTgwMjkxNDksCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45NDQ1ODM3MTk3MDg1CiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5LjczMzg5NzYxOTcwODQ5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTQ3MjgxNjgwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL2NhZmUtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvY2FmZV9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiVW5kZXIgVGhlIFVtYnJlbGxhIENhZmUgYW5kIEJha2VyeSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IGZhbHNlCiAgICAgICAgIH0sCiAgICAgICAgICJwaG90b3MiIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICJoZWlnaHQiIDogMzAyNCwKICAgICAgICAgICAgICAgImh0bWxfYXR0cmlidXRpb25zIiA6IFsKICAgICAgICAgICAgICAgICAgIlx1MDAzY2EgaHJlZj1cImh0dHBzOi8vbWFwcy5nb29nbGUuY29tL21hcHMvY29udHJpYi8xMDExOTQ2NTA3NzY0OTI3OTQ2ODRcIlx1MDAzZVVuZGVyIFRoZSBVbWJyZWxsYSBDYWZlIGFuZCBCYWtlcnlcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFQVR2NHd0c3BJNzFyLS1YTWpBeEd1Z21ESml4cm1hLU9sb21RX0xaM2tiWE1tb1VsWktFM0dUMURJbWJSRlZFX1BrNlNUMXZzcGlieFBod2l4aGktd1B5R1hIcS1yM2RrSDByRzZPZWo1aHdhX1lUcWN6VUtFYmtWUG5RMkM4OUlrczhqdENoczg2U0FzNlkyTEVvVDNFVU1ZaC1hYzZKMmJkX3RxZGlkMkRDQVlLIiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDQwMzIKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUpGY2dtUEs5LWJJY1JINC1WMTctLWxqSSIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDNQMys0TSBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQM1AzKzRNIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMSwKICAgICAgICAgInJhdGluZyIgOiA0LjQsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUpGY2dtUEs5LWJJY1JINC1WMTctLWxqSSIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsKICAgICAgICAgICAgImNhZmUiLAogICAgICAgICAgICAiYmFrZXJ5IiwKICAgICAgICAgICAgIm1lYWxfdGFrZWF3YXkiLAogICAgICAgICAgICAicmVzdGF1cmFudCIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInN0b3JlIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMjQ2LAogICAgICAgICAidmljaW5pdHkiIDogIjM1MDcgRWFzdCAxMnRoIEF2ZW51ZSwgRGVudmVyIgogICAgICB9LAogICAgICB7CiAgICAgICAgICJidXNpbmVzc19zdGF0dXMiIDogIk9QRVJBVElPTkFMIiwKICAgICAgICAgImdlb21ldHJ5IiA6IHsKICAgICAgICAgICAgImxvY2F0aW9uIiA6IHsKICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDM0NTYzLAogICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTYyOTM0MwogICAgICAgICAgICB9LAogICAgICAgICAgICAidmlld3BvcnQiIDogewogICAgICAgICAgICAgICAibm9ydGhlYXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDQ2ODY1MzAyOTE1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTYxNTk4ODY5NzA4NQogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAic291dGh3ZXN0IiA6IHsKICAgICAgICAgICAgICAgICAgImxhdCIgOiAzOS43NDE5ODg1Njk3MDg1LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTY0Mjk2ODMwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL2NhZmUtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvY2FmZV9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiU3QgTWFyaydzIENvZmZlZSBIb3VzZSIsCiAgICAgICAgICJvcGVuaW5nX2hvdXJzIiA6IHsKICAgICAgICAgICAgIm9wZW5fbm93IiA6IHRydWUKICAgICAgICAgfSwKICAgICAgICAgInBob3RvcyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgImhlaWdodCIgOiA0MDMyLAogICAgICAgICAgICAgICAiaHRtbF9hdHRyaWJ1dGlvbnMiIDogWwogICAgICAgICAgICAgICAgICAiXHUwMDNjYSBocmVmPVwiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcy9jb250cmliLzEwOTAwNTQ3MjM5MTA1MjQyMjQ3MVwiXHUwMDNlU3QgTWFyayYjMzk7cyBDb2ZmZWUgSG91c2VcdTAwM2MvYVx1MDAzZSIKICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgInBob3RvX3JlZmVyZW5jZSIgOiAiQWFwX3VFQUtXUjJRUHh5ZmZYbWhKcEpKVElrUy1LSnBrSjRGMTNyMFRsSlZ1TnpKZnVtdTdMWlQ2aHQ4Y2hHQ1FMTndWSm9LWW0zQlBHbENaYzZGTFBINjlqOWwwMHo1RE5iX3RwbEJ3ekxPRE9LOHA0Q3Y3MkJ0cVFDS1NKa29ieWNYSUZ1NHEwZ0F3eUkwQW1OdF9XYkppRjlVcW9Ia3NxQjdwclE5anFlalF3Ri1wZld0IiwKICAgICAgICAgICAgICAgIndpZHRoIiA6IDMwMjQKICAgICAgICAgICAgfQogICAgICAgICBdLAogICAgICAgICAicGxhY2VfaWQiIDogIkNoSUp4NzJkZWpWNWJJY1JqLUpobjdrVDltZyIsCiAgICAgICAgICJwbHVzX2NvZGUiIDogewogICAgICAgICAgICAiY29tcG91bmRfY29kZSIgOiAiUDJWUCs5UiBEZW52ZXIsIENPLCBVU0EiLAogICAgICAgICAgICAiZ2xvYmFsX2NvZGUiIDogIjg1RlFQMlZQKzlSIgogICAgICAgICB9LAogICAgICAgICAicHJpY2VfbGV2ZWwiIDogMSwKICAgICAgICAgInJhdGluZyIgOiA0LjQsCiAgICAgICAgICJyZWZlcmVuY2UiIDogIkNoSUp4NzJkZWpWNWJJY1JqLUpobjdrVDltZyIsCiAgICAgICAgICJzY29wZSIgOiAiR09PR0xFIiwKICAgICAgICAgInR5cGVzIiA6IFsgImNhZmUiLCAiZm9vZCIsICJwb2ludF9vZl9pbnRlcmVzdCIsICJlc3RhYmxpc2htZW50IiBdLAogICAgICAgICAidXNlcl9yYXRpbmdzX3RvdGFsIiA6IDY5OCwKICAgICAgICAgInZpY2luaXR5IiA6ICIyMDE5IEVhc3QgMTd0aCBBdmVudWUsIERlbnZlciIKICAgICAgfSwKICAgICAgewogICAgICAgICAiYnVzaW5lc3Nfc3RhdHVzIiA6ICJPUEVSQVRJT05BTCIsCiAgICAgICAgICJnZW9tZXRyeSIgOiB7CiAgICAgICAgICAgICJsb2NhdGlvbiIgOiB7CiAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzM5OTkzNSwKICAgICAgICAgICAgICAgImxuZyIgOiAtMTA0LjkyOTg1MzkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpZXdwb3J0IiA6IHsKICAgICAgICAgICAgICAgIm5vcnRoZWFzdCIgOiB7CiAgICAgICAgICAgICAgICAgICJsYXQiIDogMzkuNzQxMzk3NDMwMjkxNDksCiAgICAgICAgICAgICAgICAgICJsbmciIDogLTEwNC45Mjg1NDk3MTk3MDg1CiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICJzb3V0aHdlc3QiIDogewogICAgICAgICAgICAgICAgICAibGF0IiA6IDM5LjczODY5OTQ2OTcwODQ5LAogICAgICAgICAgICAgICAgICAibG5nIiA6IC0xMDQuOTMxMjQ3NjgwMjkxNQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgfSwKICAgICAgICAgImljb24iIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjEvcG5nXzcxL3Jlc3RhdXJhbnQtNzEucG5nIiwKICAgICAgICAgImljb25fYmFja2dyb3VuZF9jb2xvciIgOiAiI0ZGOUU2NyIsCiAgICAgICAgICJpY29uX21hc2tfYmFzZV91cmkiIDogImh0dHBzOi8vbWFwcy5nc3RhdGljLmNvbS9tYXBmaWxlcy9wbGFjZV9hcGkvaWNvbnMvdjIvcmVzdGF1cmFudF9waW5sZXQiLAogICAgICAgICAibmFtZSIgOiAiQ2l0eSBEb251dHMiLAogICAgICAgICAib3BlbmluZ19ob3VycyIgOiB7CiAgICAgICAgICAgICJvcGVuX25vdyIgOiBmYWxzZQogICAgICAgICB9LAogICAgICAgICAicGhvdG9zIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAiaGVpZ2h0IiA6IDEyMzAsCiAgICAgICAgICAgICAgICJodG1sX2F0dHJpYnV0aW9ucyIgOiBbCiAgICAgICAgICAgICAgICAgICJcdTAwM2NhIGhyZWY9XCJodHRwczovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2NvbnRyaWIvMTA3ODkxNDUzODY3OTMyMzQ4NTA0XCJcdTAwM2VDaXR5IERvbnV0c1x1MDAzYy9hXHUwMDNlIgogICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAicGhvdG9fcmVmZXJlbmNlIiA6ICJBYXBfdUVBV1NNdTFpb3NSaExHeVNhQzZqeGFTaFNMYlQ4VElWbUJYTWlkdW5VSi1BWUZ0VXQtTF9sNTkxU2Zra1lrVVZtdTRRdFQya3JIUVdtaGFSVW4xREliV0diYW1CYnZJQ1BFT3pqR3Y0bU9BdGFEY3B4cnNRZlR6V19yZ1I5N0p4NGFYSUctWExUZXgyQTFoWHZrMm5oTzNjamVmNlVGWnhweHBOVzBBc3ZkODNGTFciLAogICAgICAgICAgICAgICAid2lkdGgiIDogMTI0MgogICAgICAgICAgICB9CiAgICAgICAgIF0sCiAgICAgICAgICJwbGFjZV9pZCIgOiAiQ2hJSnMyQ056UVY4YkljUm12RnVrVHNLQWF3IiwKICAgICAgICAgInBsdXNfY29kZSIgOiB7CiAgICAgICAgICAgICJjb21wb3VuZF9jb2RlIiA6ICJQM1FDK1gzIERlbnZlciwgQ08sIFVTQSIsCiAgICAgICAgICAgICJnbG9iYWxfY29kZSIgOiAiODVGUVAzUUMrWDMiCiAgICAgICAgIH0sCiAgICAgICAgICJwcmljZV9sZXZlbCIgOiAxLAogICAgICAgICAicmF0aW5nIiA6IDQuNiwKICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hJSnMyQ056UVY4YkljUm12RnVrVHNLQWF3IiwKICAgICAgICAgInNjb3BlIiA6ICJHT09HTEUiLAogICAgICAgICAidHlwZXMiIDogWwogICAgICAgICAgICAiYmFrZXJ5IiwKICAgICAgICAgICAgImNhZmUiLAogICAgICAgICAgICAicmVzdGF1cmFudCIsCiAgICAgICAgICAgICJmb29kIiwKICAgICAgICAgICAgInN0b3JlIiwKICAgICAgICAgICAgInBvaW50X29mX2ludGVyZXN0IiwKICAgICAgICAgICAgImVzdGFibGlzaG1lbnQiCiAgICAgICAgIF0sCiAgICAgICAgICJ1c2VyX3JhdGluZ3NfdG90YWwiIDogMjg3LAogICAgICAgICAidmljaW5pdHkiIDogIjQ5MTggRWFzdCBDb2xmYXggQXZlbnVlLCBEZW52ZXIiCiAgICAgIH0KICAgXSwKICAgInN0YXR1cyIgOiAiT0siCn0K
  recorded_at: Thu, 09 Jun 2022 01:15:21 GMT
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/place/nearbysearch/json?key&location=39.7512038,-104.9447319&rankby=distance&type=cafe
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.3.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Mon, 04 Jul 2022 17:41:07 GMT
      Pragma:
      - no-cache
      Expires:
      - Fri, 01 Jan 1990 00:00:00 GMT
      Cache-Control:
      - no-cache, must-revalidate
      Vary:
      - Accept-Language
      Server:
      - scaffolding on HTTPServer2
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=6
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
           "error_message" : "You must use an API key to authenticate each request to Google Maps Platform APIs. For additional information, please refer to http://g.co/dev/maps-no-account",
           "html_attributions" : [],
           "results" : [],
           "status" : "REQUEST_DENIED"
        }
  recorded_at: Mon, 04 Jul 2022 17:41:07 GMT
recorded_with: VCR 6.1.0
